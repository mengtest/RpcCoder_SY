// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TeamRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TeamRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TeamRpcCreateTeamAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcCreateTeamAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcCreateTeamReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcCreateTeamReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcJoinTeamAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcJoinTeamAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcJoinTeamReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcJoinTeamReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcLeaveTeamAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcLeaveTeamAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcLeaveTeamReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcLeaveTeamReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcAppointTeamLeaderAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcAppointTeamLeaderAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcAppointTeamLeaderReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcAppointTeamLeaderReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcNewLeaderNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcNewLeaderNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcKickMemberAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcKickMemberAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcKickMemberReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcKickMemberReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcDissmissTeamAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcDissmissTeamAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcDissmissTeamReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcDissmissTeamReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcAppointTeamLeaderNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcAppointTeamLeaderNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcKickMemberNotifyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcKickMemberNotifyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcLeaveTeamNotifyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcLeaveTeamNotifyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcJoinTeamNotifyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcJoinTeamNotifyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcDissmissTeamNotifyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcDissmissTeamNotifyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcSurroundingTeamAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcSurroundingTeamAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcSurroundingTeamReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcSurroundingTeamReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcApplyTeamAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcApplyTeamAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcApplyTeamReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcApplyTeamReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcApplyTeamNotifyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcApplyTeamNotifyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcAgreeApplicantAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcAgreeApplicantAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcAgreeApplicantReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcAgreeApplicantReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcAgreeApplicantNotifyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcAgreeApplicantNotifyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcTeamInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcTeamInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcUpdateTeamMemInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcUpdateTeamMemInfoNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TeamRpc_2eproto() {
  protobuf_AddDesc_TeamRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TeamRpc.proto");
  GOOGLE_CHECK(file != NULL);
  TeamRpcCreateTeamAsk_descriptor_ = file->message_type(0);
  static const int TeamRpcCreateTeamAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCreateTeamAsk, teamtype_),
  };
  TeamRpcCreateTeamAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcCreateTeamAsk_descriptor_,
      TeamRpcCreateTeamAsk::default_instance_,
      TeamRpcCreateTeamAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCreateTeamAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCreateTeamAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcCreateTeamAsk));
  TeamRpcCreateTeamReply_descriptor_ = file->message_type(1);
  static const int TeamRpcCreateTeamReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCreateTeamReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCreateTeamReply, team_),
  };
  TeamRpcCreateTeamReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcCreateTeamReply_descriptor_,
      TeamRpcCreateTeamReply::default_instance_,
      TeamRpcCreateTeamReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCreateTeamReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCreateTeamReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcCreateTeamReply));
  TeamRpcJoinTeamAsk_descriptor_ = file->message_type(2);
  static const int TeamRpcJoinTeamAsk_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcJoinTeamAsk, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcJoinTeamAsk, teamtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcJoinTeamAsk, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcJoinTeamAsk, teammember_),
  };
  TeamRpcJoinTeamAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcJoinTeamAsk_descriptor_,
      TeamRpcJoinTeamAsk::default_instance_,
      TeamRpcJoinTeamAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcJoinTeamAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcJoinTeamAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcJoinTeamAsk));
  TeamRpcJoinTeamReply_descriptor_ = file->message_type(3);
  static const int TeamRpcJoinTeamReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcJoinTeamReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcJoinTeamReply, team_),
  };
  TeamRpcJoinTeamReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcJoinTeamReply_descriptor_,
      TeamRpcJoinTeamReply::default_instance_,
      TeamRpcJoinTeamReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcJoinTeamReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcJoinTeamReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcJoinTeamReply));
  TeamRpcLeaveTeamAsk_descriptor_ = file->message_type(4);
  static const int TeamRpcLeaveTeamAsk_offsets_[1] = {
  };
  TeamRpcLeaveTeamAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcLeaveTeamAsk_descriptor_,
      TeamRpcLeaveTeamAsk::default_instance_,
      TeamRpcLeaveTeamAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcLeaveTeamAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcLeaveTeamAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcLeaveTeamAsk));
  TeamRpcLeaveTeamReply_descriptor_ = file->message_type(5);
  static const int TeamRpcLeaveTeamReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcLeaveTeamReply, result_),
  };
  TeamRpcLeaveTeamReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcLeaveTeamReply_descriptor_,
      TeamRpcLeaveTeamReply::default_instance_,
      TeamRpcLeaveTeamReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcLeaveTeamReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcLeaveTeamReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcLeaveTeamReply));
  TeamRpcAppointTeamLeaderAsk_descriptor_ = file->message_type(6);
  static const int TeamRpcAppointTeamLeaderAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAppointTeamLeaderAsk, roleid_),
  };
  TeamRpcAppointTeamLeaderAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcAppointTeamLeaderAsk_descriptor_,
      TeamRpcAppointTeamLeaderAsk::default_instance_,
      TeamRpcAppointTeamLeaderAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAppointTeamLeaderAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAppointTeamLeaderAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcAppointTeamLeaderAsk));
  TeamRpcAppointTeamLeaderReply_descriptor_ = file->message_type(7);
  static const int TeamRpcAppointTeamLeaderReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAppointTeamLeaderReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAppointTeamLeaderReply, newleaderid_),
  };
  TeamRpcAppointTeamLeaderReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcAppointTeamLeaderReply_descriptor_,
      TeamRpcAppointTeamLeaderReply::default_instance_,
      TeamRpcAppointTeamLeaderReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAppointTeamLeaderReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAppointTeamLeaderReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcAppointTeamLeaderReply));
  TeamRpcNewLeaderNotify_descriptor_ = file->message_type(8);
  static const int TeamRpcNewLeaderNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNewLeaderNotify, newleaderroleid_),
  };
  TeamRpcNewLeaderNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcNewLeaderNotify_descriptor_,
      TeamRpcNewLeaderNotify::default_instance_,
      TeamRpcNewLeaderNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNewLeaderNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNewLeaderNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcNewLeaderNotify));
  TeamRpcKickMemberAsk_descriptor_ = file->message_type(9);
  static const int TeamRpcKickMemberAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcKickMemberAsk, kickmemberroleid_),
  };
  TeamRpcKickMemberAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcKickMemberAsk_descriptor_,
      TeamRpcKickMemberAsk::default_instance_,
      TeamRpcKickMemberAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcKickMemberAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcKickMemberAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcKickMemberAsk));
  TeamRpcKickMemberReply_descriptor_ = file->message_type(10);
  static const int TeamRpcKickMemberReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcKickMemberReply, result_),
  };
  TeamRpcKickMemberReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcKickMemberReply_descriptor_,
      TeamRpcKickMemberReply::default_instance_,
      TeamRpcKickMemberReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcKickMemberReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcKickMemberReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcKickMemberReply));
  TeamRpcDissmissTeamAsk_descriptor_ = file->message_type(11);
  static const int TeamRpcDissmissTeamAsk_offsets_[1] = {
  };
  TeamRpcDissmissTeamAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcDissmissTeamAsk_descriptor_,
      TeamRpcDissmissTeamAsk::default_instance_,
      TeamRpcDissmissTeamAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcDissmissTeamAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcDissmissTeamAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcDissmissTeamAsk));
  TeamRpcDissmissTeamReply_descriptor_ = file->message_type(12);
  static const int TeamRpcDissmissTeamReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcDissmissTeamReply, result_),
  };
  TeamRpcDissmissTeamReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcDissmissTeamReply_descriptor_,
      TeamRpcDissmissTeamReply::default_instance_,
      TeamRpcDissmissTeamReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcDissmissTeamReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcDissmissTeamReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcDissmissTeamReply));
  TeamRpcAppointTeamLeaderNotify_descriptor_ = file->message_type(13);
  static const int TeamRpcAppointTeamLeaderNotify_offsets_[1] = {
  };
  TeamRpcAppointTeamLeaderNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcAppointTeamLeaderNotify_descriptor_,
      TeamRpcAppointTeamLeaderNotify::default_instance_,
      TeamRpcAppointTeamLeaderNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAppointTeamLeaderNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAppointTeamLeaderNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcAppointTeamLeaderNotify));
  TeamRpcKickMemberNotifyNotify_descriptor_ = file->message_type(14);
  static const int TeamRpcKickMemberNotifyNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcKickMemberNotifyNotify, kickedmemberroleid_),
  };
  TeamRpcKickMemberNotifyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcKickMemberNotifyNotify_descriptor_,
      TeamRpcKickMemberNotifyNotify::default_instance_,
      TeamRpcKickMemberNotifyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcKickMemberNotifyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcKickMemberNotifyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcKickMemberNotifyNotify));
  TeamRpcLeaveTeamNotifyNotify_descriptor_ = file->message_type(15);
  static const int TeamRpcLeaveTeamNotifyNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcLeaveTeamNotifyNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcLeaveTeamNotifyNotify, newleaderroleid_),
  };
  TeamRpcLeaveTeamNotifyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcLeaveTeamNotifyNotify_descriptor_,
      TeamRpcLeaveTeamNotifyNotify::default_instance_,
      TeamRpcLeaveTeamNotifyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcLeaveTeamNotifyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcLeaveTeamNotifyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcLeaveTeamNotifyNotify));
  TeamRpcJoinTeamNotifyNotify_descriptor_ = file->message_type(16);
  static const int TeamRpcJoinTeamNotifyNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcJoinTeamNotifyNotify, teammember_),
  };
  TeamRpcJoinTeamNotifyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcJoinTeamNotifyNotify_descriptor_,
      TeamRpcJoinTeamNotifyNotify::default_instance_,
      TeamRpcJoinTeamNotifyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcJoinTeamNotifyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcJoinTeamNotifyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcJoinTeamNotifyNotify));
  TeamRpcDissmissTeamNotifyNotify_descriptor_ = file->message_type(17);
  static const int TeamRpcDissmissTeamNotifyNotify_offsets_[1] = {
  };
  TeamRpcDissmissTeamNotifyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcDissmissTeamNotifyNotify_descriptor_,
      TeamRpcDissmissTeamNotifyNotify::default_instance_,
      TeamRpcDissmissTeamNotifyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcDissmissTeamNotifyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcDissmissTeamNotifyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcDissmissTeamNotifyNotify));
  TeamRpcSurroundingTeamAsk_descriptor_ = file->message_type(18);
  static const int TeamRpcSurroundingTeamAsk_offsets_[1] = {
  };
  TeamRpcSurroundingTeamAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcSurroundingTeamAsk_descriptor_,
      TeamRpcSurroundingTeamAsk::default_instance_,
      TeamRpcSurroundingTeamAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcSurroundingTeamAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcSurroundingTeamAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcSurroundingTeamAsk));
  TeamRpcSurroundingTeamReply_descriptor_ = file->message_type(19);
  static const int TeamRpcSurroundingTeamReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcSurroundingTeamReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcSurroundingTeamReply, teamsinfo_),
  };
  TeamRpcSurroundingTeamReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcSurroundingTeamReply_descriptor_,
      TeamRpcSurroundingTeamReply::default_instance_,
      TeamRpcSurroundingTeamReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcSurroundingTeamReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcSurroundingTeamReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcSurroundingTeamReply));
  TeamRpcApplyTeamAsk_descriptor_ = file->message_type(20);
  static const int TeamRpcApplyTeamAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyTeamAsk, teamid_),
  };
  TeamRpcApplyTeamAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcApplyTeamAsk_descriptor_,
      TeamRpcApplyTeamAsk::default_instance_,
      TeamRpcApplyTeamAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyTeamAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyTeamAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcApplyTeamAsk));
  TeamRpcApplyTeamReply_descriptor_ = file->message_type(21);
  static const int TeamRpcApplyTeamReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyTeamReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyTeamReply, teamid_),
  };
  TeamRpcApplyTeamReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcApplyTeamReply_descriptor_,
      TeamRpcApplyTeamReply::default_instance_,
      TeamRpcApplyTeamReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyTeamReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyTeamReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcApplyTeamReply));
  TeamRpcApplyTeamNotifyNotify_descriptor_ = file->message_type(22);
  static const int TeamRpcApplyTeamNotifyNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyTeamNotifyNotify, teammember_),
  };
  TeamRpcApplyTeamNotifyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcApplyTeamNotifyNotify_descriptor_,
      TeamRpcApplyTeamNotifyNotify::default_instance_,
      TeamRpcApplyTeamNotifyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyTeamNotifyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyTeamNotifyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcApplyTeamNotifyNotify));
  TeamRpcAgreeApplicantAsk_descriptor_ = file->message_type(23);
  static const int TeamRpcAgreeApplicantAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAgreeApplicantAsk, roleid_),
  };
  TeamRpcAgreeApplicantAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcAgreeApplicantAsk_descriptor_,
      TeamRpcAgreeApplicantAsk::default_instance_,
      TeamRpcAgreeApplicantAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAgreeApplicantAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAgreeApplicantAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcAgreeApplicantAsk));
  TeamRpcAgreeApplicantReply_descriptor_ = file->message_type(24);
  static const int TeamRpcAgreeApplicantReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAgreeApplicantReply, result_),
  };
  TeamRpcAgreeApplicantReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcAgreeApplicantReply_descriptor_,
      TeamRpcAgreeApplicantReply::default_instance_,
      TeamRpcAgreeApplicantReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAgreeApplicantReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAgreeApplicantReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcAgreeApplicantReply));
  TeamRpcAgreeApplicantNotifyNotify_descriptor_ = file->message_type(25);
  static const int TeamRpcAgreeApplicantNotifyNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAgreeApplicantNotifyNotify, team_),
  };
  TeamRpcAgreeApplicantNotifyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcAgreeApplicantNotifyNotify_descriptor_,
      TeamRpcAgreeApplicantNotifyNotify::default_instance_,
      TeamRpcAgreeApplicantNotifyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAgreeApplicantNotifyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAgreeApplicantNotifyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcAgreeApplicantNotifyNotify));
  TeamRpcTeamInfoNotify_descriptor_ = file->message_type(26);
  static const int TeamRpcTeamInfoNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcTeamInfoNotify, team_),
  };
  TeamRpcTeamInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcTeamInfoNotify_descriptor_,
      TeamRpcTeamInfoNotify::default_instance_,
      TeamRpcTeamInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcTeamInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcTeamInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcTeamInfoNotify));
  TeamRpcUpdateTeamMemInfoNotify_descriptor_ = file->message_type(27);
  static const int TeamRpcUpdateTeamMemInfoNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcUpdateTeamMemInfoNotify, teammember_),
  };
  TeamRpcUpdateTeamMemInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcUpdateTeamMemInfoNotify_descriptor_,
      TeamRpcUpdateTeamMemInfoNotify::default_instance_,
      TeamRpcUpdateTeamMemInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcUpdateTeamMemInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcUpdateTeamMemInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcUpdateTeamMemInfoNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TeamRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcCreateTeamAsk_descriptor_, &TeamRpcCreateTeamAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcCreateTeamReply_descriptor_, &TeamRpcCreateTeamReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcJoinTeamAsk_descriptor_, &TeamRpcJoinTeamAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcJoinTeamReply_descriptor_, &TeamRpcJoinTeamReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcLeaveTeamAsk_descriptor_, &TeamRpcLeaveTeamAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcLeaveTeamReply_descriptor_, &TeamRpcLeaveTeamReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcAppointTeamLeaderAsk_descriptor_, &TeamRpcAppointTeamLeaderAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcAppointTeamLeaderReply_descriptor_, &TeamRpcAppointTeamLeaderReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcNewLeaderNotify_descriptor_, &TeamRpcNewLeaderNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcKickMemberAsk_descriptor_, &TeamRpcKickMemberAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcKickMemberReply_descriptor_, &TeamRpcKickMemberReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcDissmissTeamAsk_descriptor_, &TeamRpcDissmissTeamAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcDissmissTeamReply_descriptor_, &TeamRpcDissmissTeamReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcAppointTeamLeaderNotify_descriptor_, &TeamRpcAppointTeamLeaderNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcKickMemberNotifyNotify_descriptor_, &TeamRpcKickMemberNotifyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcLeaveTeamNotifyNotify_descriptor_, &TeamRpcLeaveTeamNotifyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcJoinTeamNotifyNotify_descriptor_, &TeamRpcJoinTeamNotifyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcDissmissTeamNotifyNotify_descriptor_, &TeamRpcDissmissTeamNotifyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcSurroundingTeamAsk_descriptor_, &TeamRpcSurroundingTeamAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcSurroundingTeamReply_descriptor_, &TeamRpcSurroundingTeamReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcApplyTeamAsk_descriptor_, &TeamRpcApplyTeamAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcApplyTeamReply_descriptor_, &TeamRpcApplyTeamReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcApplyTeamNotifyNotify_descriptor_, &TeamRpcApplyTeamNotifyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcAgreeApplicantAsk_descriptor_, &TeamRpcAgreeApplicantAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcAgreeApplicantReply_descriptor_, &TeamRpcAgreeApplicantReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcAgreeApplicantNotifyNotify_descriptor_, &TeamRpcAgreeApplicantNotifyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcTeamInfoNotify_descriptor_, &TeamRpcTeamInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcUpdateTeamMemInfoNotify_descriptor_, &TeamRpcUpdateTeamMemInfoNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TeamRpc_2eproto() {
  delete TeamRpcCreateTeamAsk::default_instance_;
  delete TeamRpcCreateTeamAsk_reflection_;
  delete TeamRpcCreateTeamReply::default_instance_;
  delete TeamRpcCreateTeamReply_reflection_;
  delete TeamRpcJoinTeamAsk::default_instance_;
  delete TeamRpcJoinTeamAsk_reflection_;
  delete TeamRpcJoinTeamReply::default_instance_;
  delete TeamRpcJoinTeamReply_reflection_;
  delete TeamRpcLeaveTeamAsk::default_instance_;
  delete TeamRpcLeaveTeamAsk_reflection_;
  delete TeamRpcLeaveTeamReply::default_instance_;
  delete TeamRpcLeaveTeamReply_reflection_;
  delete TeamRpcAppointTeamLeaderAsk::default_instance_;
  delete TeamRpcAppointTeamLeaderAsk_reflection_;
  delete TeamRpcAppointTeamLeaderReply::default_instance_;
  delete TeamRpcAppointTeamLeaderReply_reflection_;
  delete TeamRpcNewLeaderNotify::default_instance_;
  delete TeamRpcNewLeaderNotify_reflection_;
  delete TeamRpcKickMemberAsk::default_instance_;
  delete TeamRpcKickMemberAsk_reflection_;
  delete TeamRpcKickMemberReply::default_instance_;
  delete TeamRpcKickMemberReply_reflection_;
  delete TeamRpcDissmissTeamAsk::default_instance_;
  delete TeamRpcDissmissTeamAsk_reflection_;
  delete TeamRpcDissmissTeamReply::default_instance_;
  delete TeamRpcDissmissTeamReply_reflection_;
  delete TeamRpcAppointTeamLeaderNotify::default_instance_;
  delete TeamRpcAppointTeamLeaderNotify_reflection_;
  delete TeamRpcKickMemberNotifyNotify::default_instance_;
  delete TeamRpcKickMemberNotifyNotify_reflection_;
  delete TeamRpcLeaveTeamNotifyNotify::default_instance_;
  delete TeamRpcLeaveTeamNotifyNotify_reflection_;
  delete TeamRpcJoinTeamNotifyNotify::default_instance_;
  delete TeamRpcJoinTeamNotifyNotify_reflection_;
  delete TeamRpcDissmissTeamNotifyNotify::default_instance_;
  delete TeamRpcDissmissTeamNotifyNotify_reflection_;
  delete TeamRpcSurroundingTeamAsk::default_instance_;
  delete TeamRpcSurroundingTeamAsk_reflection_;
  delete TeamRpcSurroundingTeamReply::default_instance_;
  delete TeamRpcSurroundingTeamReply_reflection_;
  delete TeamRpcApplyTeamAsk::default_instance_;
  delete TeamRpcApplyTeamAsk_reflection_;
  delete TeamRpcApplyTeamReply::default_instance_;
  delete TeamRpcApplyTeamReply_reflection_;
  delete TeamRpcApplyTeamNotifyNotify::default_instance_;
  delete TeamRpcApplyTeamNotifyNotify_reflection_;
  delete TeamRpcAgreeApplicantAsk::default_instance_;
  delete TeamRpcAgreeApplicantAsk_reflection_;
  delete TeamRpcAgreeApplicantReply::default_instance_;
  delete TeamRpcAgreeApplicantReply_reflection_;
  delete TeamRpcAgreeApplicantNotifyNotify::default_instance_;
  delete TeamRpcAgreeApplicantNotifyNotify_reflection_;
  delete TeamRpcTeamInfoNotify::default_instance_;
  delete TeamRpcTeamInfoNotify_reflection_;
  delete TeamRpcUpdateTeamMemInfoNotify::default_instance_;
  delete TeamRpcUpdateTeamMemInfoNotify_reflection_;
}

void protobuf_AddDesc_TeamRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rTeamRpc.proto\032\022PublicStruct.proto\",\n\024T"
    "eamRpcCreateTeamAsk\022\024\n\010TeamType\030\002 \001(\021:\002-"
    "1\"H\n\026TeamRpcCreateTeamReply\022\025\n\006Result\030\001 "
    "\001(\021:\005-9999\022\027\n\004Team\030\002 \001(\0132\t.TeamInfo\"|\n\022T"
    "eamRpcJoinTeamAsk\022\022\n\006TeamId\030\001 \001(\021:\002-1\022\024\n"
    "\010TeamType\030\002 \001(\021:\002-1\022\027\n\004Team\030\003 \001(\0132\t.Team"
    "Info\022#\n\nTeamMember\030\004 \001(\0132\017.TeamMemberInf"
    "o\"F\n\024TeamRpcJoinTeamReply\022\025\n\006Result\030\001 \001("
    "\021:\005-9999\022\027\n\004Team\030\002 \001(\0132\t.TeamInfo\"\025\n\023Tea"
    "mRpcLeaveTeamAsk\".\n\025TeamRpcLeaveTeamRepl"
    "y\022\025\n\006Result\030\001 \001(\021:\005-9999\"0\n\033TeamRpcAppoi"
    "ntTeamLeaderAsk\022\021\n\006RoleId\030\001 \001(\004:\0010\"N\n\035Te"
    "amRpcAppointTeamLeaderReply\022\025\n\006Result\030\001 "
    "\001(\021:\005-9999\022\026\n\013NewLeaderId\030\002 \001(\004:\0010\"4\n\026Te"
    "amRpcNewLeaderNotify\022\032\n\017Newleaderroleid\030"
    "\001 \001(\004:\0010\"3\n\024TeamRpcKickMemberAsk\022\033\n\020Kick"
    "MemberRoleId\030\001 \001(\004:\0010\"/\n\026TeamRpcKickMemb"
    "erReply\022\025\n\006Result\030\001 \001(\021:\005-9999\"\030\n\026TeamRp"
    "cDissmissTeamAsk\"1\n\030TeamRpcDissmissTeamR"
    "eply\022\025\n\006Result\030\001 \001(\021:\005-9999\" \n\036TeamRpcAp"
    "pointTeamLeaderNotify\">\n\035TeamRpcKickMemb"
    "erNotifyNotify\022\035\n\022KickedMemberRoleId\030\001 \001"
    "(\004:\0010\"M\n\034TeamRpcLeaveTeamNotifyNotify\022\021\n"
    "\006RoleId\030\001 \001(\004:\0010\022\032\n\017NewLeaderRoleId\030\002 \001("
    "\004:\0010\"B\n\033TeamRpcJoinTeamNotifyNotify\022#\n\nT"
    "eamMember\030\001 \001(\0132\017.TeamMemberInfo\"!\n\037Team"
    "RpcDissmissTeamNotifyNotify\"\033\n\031TeamRpcSu"
    "rroundingTeamAsk\"R\n\033TeamRpcSurroundingTe"
    "amReply\022\025\n\006Result\030\001 \001(\021:\005-9999\022\034\n\tTeamsI"
    "nfo\030\002 \003(\0132\t.TeamInfo\")\n\023TeamRpcApplyTeam"
    "Ask\022\022\n\006TeamId\030\001 \001(\021:\002-1\"B\n\025TeamRpcApplyT"
    "eamReply\022\025\n\006Result\030\001 \001(\021:\005-9999\022\022\n\006TeamI"
    "d\030\002 \001(\021:\002-1\"C\n\034TeamRpcApplyTeamNotifyNot"
    "ify\022#\n\nTeamMember\030\001 \001(\0132\017.TeamMemberInfo"
    "\"-\n\030TeamRpcAgreeApplicantAsk\022\021\n\006RoleId\030\002"
    " \001(\004:\0010\"3\n\032TeamRpcAgreeApplicantReply\022\025\n"
    "\006Result\030\001 \001(\021:\005-9999\"<\n!TeamRpcAgreeAppl"
    "icantNotifyNotify\022\027\n\004Team\030\001 \001(\0132\t.TeamIn"
    "fo\"0\n\025TeamRpcTeamInfoNotify\022\027\n\004Team\030\001 \001("
    "\0132\t.TeamInfo\"E\n\036TeamRpcUpdateTeamMemInfo"
    "Notify\022#\n\nTeamMember\030\001 \001(\0132\017.TeamMemberI"
    "nfo", 1643);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TeamRpc.proto", &protobuf_RegisterTypes);
  TeamRpcCreateTeamAsk::default_instance_ = new TeamRpcCreateTeamAsk();
  TeamRpcCreateTeamReply::default_instance_ = new TeamRpcCreateTeamReply();
  TeamRpcJoinTeamAsk::default_instance_ = new TeamRpcJoinTeamAsk();
  TeamRpcJoinTeamReply::default_instance_ = new TeamRpcJoinTeamReply();
  TeamRpcLeaveTeamAsk::default_instance_ = new TeamRpcLeaveTeamAsk();
  TeamRpcLeaveTeamReply::default_instance_ = new TeamRpcLeaveTeamReply();
  TeamRpcAppointTeamLeaderAsk::default_instance_ = new TeamRpcAppointTeamLeaderAsk();
  TeamRpcAppointTeamLeaderReply::default_instance_ = new TeamRpcAppointTeamLeaderReply();
  TeamRpcNewLeaderNotify::default_instance_ = new TeamRpcNewLeaderNotify();
  TeamRpcKickMemberAsk::default_instance_ = new TeamRpcKickMemberAsk();
  TeamRpcKickMemberReply::default_instance_ = new TeamRpcKickMemberReply();
  TeamRpcDissmissTeamAsk::default_instance_ = new TeamRpcDissmissTeamAsk();
  TeamRpcDissmissTeamReply::default_instance_ = new TeamRpcDissmissTeamReply();
  TeamRpcAppointTeamLeaderNotify::default_instance_ = new TeamRpcAppointTeamLeaderNotify();
  TeamRpcKickMemberNotifyNotify::default_instance_ = new TeamRpcKickMemberNotifyNotify();
  TeamRpcLeaveTeamNotifyNotify::default_instance_ = new TeamRpcLeaveTeamNotifyNotify();
  TeamRpcJoinTeamNotifyNotify::default_instance_ = new TeamRpcJoinTeamNotifyNotify();
  TeamRpcDissmissTeamNotifyNotify::default_instance_ = new TeamRpcDissmissTeamNotifyNotify();
  TeamRpcSurroundingTeamAsk::default_instance_ = new TeamRpcSurroundingTeamAsk();
  TeamRpcSurroundingTeamReply::default_instance_ = new TeamRpcSurroundingTeamReply();
  TeamRpcApplyTeamAsk::default_instance_ = new TeamRpcApplyTeamAsk();
  TeamRpcApplyTeamReply::default_instance_ = new TeamRpcApplyTeamReply();
  TeamRpcApplyTeamNotifyNotify::default_instance_ = new TeamRpcApplyTeamNotifyNotify();
  TeamRpcAgreeApplicantAsk::default_instance_ = new TeamRpcAgreeApplicantAsk();
  TeamRpcAgreeApplicantReply::default_instance_ = new TeamRpcAgreeApplicantReply();
  TeamRpcAgreeApplicantNotifyNotify::default_instance_ = new TeamRpcAgreeApplicantNotifyNotify();
  TeamRpcTeamInfoNotify::default_instance_ = new TeamRpcTeamInfoNotify();
  TeamRpcUpdateTeamMemInfoNotify::default_instance_ = new TeamRpcUpdateTeamMemInfoNotify();
  TeamRpcCreateTeamAsk::default_instance_->InitAsDefaultInstance();
  TeamRpcCreateTeamReply::default_instance_->InitAsDefaultInstance();
  TeamRpcJoinTeamAsk::default_instance_->InitAsDefaultInstance();
  TeamRpcJoinTeamReply::default_instance_->InitAsDefaultInstance();
  TeamRpcLeaveTeamAsk::default_instance_->InitAsDefaultInstance();
  TeamRpcLeaveTeamReply::default_instance_->InitAsDefaultInstance();
  TeamRpcAppointTeamLeaderAsk::default_instance_->InitAsDefaultInstance();
  TeamRpcAppointTeamLeaderReply::default_instance_->InitAsDefaultInstance();
  TeamRpcNewLeaderNotify::default_instance_->InitAsDefaultInstance();
  TeamRpcKickMemberAsk::default_instance_->InitAsDefaultInstance();
  TeamRpcKickMemberReply::default_instance_->InitAsDefaultInstance();
  TeamRpcDissmissTeamAsk::default_instance_->InitAsDefaultInstance();
  TeamRpcDissmissTeamReply::default_instance_->InitAsDefaultInstance();
  TeamRpcAppointTeamLeaderNotify::default_instance_->InitAsDefaultInstance();
  TeamRpcKickMemberNotifyNotify::default_instance_->InitAsDefaultInstance();
  TeamRpcLeaveTeamNotifyNotify::default_instance_->InitAsDefaultInstance();
  TeamRpcJoinTeamNotifyNotify::default_instance_->InitAsDefaultInstance();
  TeamRpcDissmissTeamNotifyNotify::default_instance_->InitAsDefaultInstance();
  TeamRpcSurroundingTeamAsk::default_instance_->InitAsDefaultInstance();
  TeamRpcSurroundingTeamReply::default_instance_->InitAsDefaultInstance();
  TeamRpcApplyTeamAsk::default_instance_->InitAsDefaultInstance();
  TeamRpcApplyTeamReply::default_instance_->InitAsDefaultInstance();
  TeamRpcApplyTeamNotifyNotify::default_instance_->InitAsDefaultInstance();
  TeamRpcAgreeApplicantAsk::default_instance_->InitAsDefaultInstance();
  TeamRpcAgreeApplicantReply::default_instance_->InitAsDefaultInstance();
  TeamRpcAgreeApplicantNotifyNotify::default_instance_->InitAsDefaultInstance();
  TeamRpcTeamInfoNotify::default_instance_->InitAsDefaultInstance();
  TeamRpcUpdateTeamMemInfoNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TeamRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TeamRpc_2eproto {
  StaticDescriptorInitializer_TeamRpc_2eproto() {
    protobuf_AddDesc_TeamRpc_2eproto();
  }
} static_descriptor_initializer_TeamRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TeamRpcCreateTeamAsk::kTeamTypeFieldNumber;
#endif  // !_MSC_VER

TeamRpcCreateTeamAsk::TeamRpcCreateTeamAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcCreateTeamAsk::InitAsDefaultInstance() {
}

TeamRpcCreateTeamAsk::TeamRpcCreateTeamAsk(const TeamRpcCreateTeamAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcCreateTeamAsk::SharedCtor() {
  _cached_size_ = 0;
  teamtype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcCreateTeamAsk::~TeamRpcCreateTeamAsk() {
  SharedDtor();
}

void TeamRpcCreateTeamAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcCreateTeamAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcCreateTeamAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcCreateTeamAsk_descriptor_;
}

const TeamRpcCreateTeamAsk& TeamRpcCreateTeamAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcCreateTeamAsk* TeamRpcCreateTeamAsk::default_instance_ = NULL;

TeamRpcCreateTeamAsk* TeamRpcCreateTeamAsk::New() const {
  return new TeamRpcCreateTeamAsk;
}

void TeamRpcCreateTeamAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamtype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcCreateTeamAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 TeamType = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &teamtype_)));
          set_has_teamtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcCreateTeamAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 TeamType = 2 [default = -1];
  if (has_teamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->teamtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcCreateTeamAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 TeamType = 2 [default = -1];
  if (has_teamtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->teamtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcCreateTeamAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 TeamType = 2 [default = -1];
    if (has_teamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->teamtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcCreateTeamAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcCreateTeamAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcCreateTeamAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcCreateTeamAsk::MergeFrom(const TeamRpcCreateTeamAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamtype()) {
      set_teamtype(from.teamtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcCreateTeamAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcCreateTeamAsk::CopyFrom(const TeamRpcCreateTeamAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcCreateTeamAsk::IsInitialized() const {

  return true;
}

void TeamRpcCreateTeamAsk::Swap(TeamRpcCreateTeamAsk* other) {
  if (other != this) {
    std::swap(teamtype_, other->teamtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcCreateTeamAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcCreateTeamAsk_descriptor_;
  metadata.reflection = TeamRpcCreateTeamAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcCreateTeamReply::kResultFieldNumber;
const int TeamRpcCreateTeamReply::kTeamFieldNumber;
#endif  // !_MSC_VER

TeamRpcCreateTeamReply::TeamRpcCreateTeamReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcCreateTeamReply::InitAsDefaultInstance() {
  team_ = const_cast< ::TeamInfo*>(&::TeamInfo::default_instance());
}

TeamRpcCreateTeamReply::TeamRpcCreateTeamReply(const TeamRpcCreateTeamReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcCreateTeamReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  team_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcCreateTeamReply::~TeamRpcCreateTeamReply() {
  SharedDtor();
}

void TeamRpcCreateTeamReply::SharedDtor() {
  if (this != default_instance_) {
    delete team_;
  }
}

void TeamRpcCreateTeamReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcCreateTeamReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcCreateTeamReply_descriptor_;
}

const TeamRpcCreateTeamReply& TeamRpcCreateTeamReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcCreateTeamReply* TeamRpcCreateTeamReply::default_instance_ = NULL;

TeamRpcCreateTeamReply* TeamRpcCreateTeamReply::New() const {
  return new TeamRpcCreateTeamReply;
}

void TeamRpcCreateTeamReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    if (has_team()) {
      if (team_ != NULL) team_->::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcCreateTeamReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Team;
        break;
      }

      // optional .TeamInfo Team = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcCreateTeamReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional .TeamInfo Team = 2;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcCreateTeamReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional .TeamInfo Team = 2;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcCreateTeamReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional .TeamInfo Team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcCreateTeamReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcCreateTeamReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcCreateTeamReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcCreateTeamReply::MergeFrom(const TeamRpcCreateTeamReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_team()) {
      mutable_team()->::TeamInfo::MergeFrom(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcCreateTeamReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcCreateTeamReply::CopyFrom(const TeamRpcCreateTeamReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcCreateTeamReply::IsInitialized() const {

  return true;
}

void TeamRpcCreateTeamReply::Swap(TeamRpcCreateTeamReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcCreateTeamReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcCreateTeamReply_descriptor_;
  metadata.reflection = TeamRpcCreateTeamReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcJoinTeamAsk::kTeamIdFieldNumber;
const int TeamRpcJoinTeamAsk::kTeamTypeFieldNumber;
const int TeamRpcJoinTeamAsk::kTeamFieldNumber;
const int TeamRpcJoinTeamAsk::kTeamMemberFieldNumber;
#endif  // !_MSC_VER

TeamRpcJoinTeamAsk::TeamRpcJoinTeamAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcJoinTeamAsk::InitAsDefaultInstance() {
  team_ = const_cast< ::TeamInfo*>(&::TeamInfo::default_instance());
  teammember_ = const_cast< ::TeamMemberInfo*>(&::TeamMemberInfo::default_instance());
}

TeamRpcJoinTeamAsk::TeamRpcJoinTeamAsk(const TeamRpcJoinTeamAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcJoinTeamAsk::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = -1;
  teamtype_ = -1;
  team_ = NULL;
  teammember_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcJoinTeamAsk::~TeamRpcJoinTeamAsk() {
  SharedDtor();
}

void TeamRpcJoinTeamAsk::SharedDtor() {
  if (this != default_instance_) {
    delete team_;
    delete teammember_;
  }
}

void TeamRpcJoinTeamAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcJoinTeamAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcJoinTeamAsk_descriptor_;
}

const TeamRpcJoinTeamAsk& TeamRpcJoinTeamAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcJoinTeamAsk* TeamRpcJoinTeamAsk::default_instance_ = NULL;

TeamRpcJoinTeamAsk* TeamRpcJoinTeamAsk::New() const {
  return new TeamRpcJoinTeamAsk;
}

void TeamRpcJoinTeamAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = -1;
    teamtype_ = -1;
    if (has_team()) {
      if (team_ != NULL) team_->::TeamInfo::Clear();
    }
    if (has_teammember()) {
      if (teammember_ != NULL) teammember_->::TeamMemberInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcJoinTeamAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 TeamId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TeamType;
        break;
      }

      // optional sint32 TeamType = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeamType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &teamtype_)));
          set_has_teamtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Team;
        break;
      }

      // optional .TeamInfo Team = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_TeamMember;
        break;
      }

      // optional .TeamMemberInfo TeamMember = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TeamMember:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teammember()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcJoinTeamAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 TeamId = 1 [default = -1];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->teamid(), output);
  }

  // optional sint32 TeamType = 2 [default = -1];
  if (has_teamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->teamtype(), output);
  }

  // optional .TeamInfo Team = 3;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->team(), output);
  }

  // optional .TeamMemberInfo TeamMember = 4;
  if (has_teammember()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->teammember(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcJoinTeamAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 TeamId = 1 [default = -1];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->teamid(), target);
  }

  // optional sint32 TeamType = 2 [default = -1];
  if (has_teamtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->teamtype(), target);
  }

  // optional .TeamInfo Team = 3;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->team(), target);
  }

  // optional .TeamMemberInfo TeamMember = 4;
  if (has_teammember()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->teammember(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcJoinTeamAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 TeamId = 1 [default = -1];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->teamid());
    }

    // optional sint32 TeamType = 2 [default = -1];
    if (has_teamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->teamtype());
    }

    // optional .TeamInfo Team = 3;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team());
    }

    // optional .TeamMemberInfo TeamMember = 4;
    if (has_teammember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teammember());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcJoinTeamAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcJoinTeamAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcJoinTeamAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcJoinTeamAsk::MergeFrom(const TeamRpcJoinTeamAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_teamtype()) {
      set_teamtype(from.teamtype());
    }
    if (from.has_team()) {
      mutable_team()->::TeamInfo::MergeFrom(from.team());
    }
    if (from.has_teammember()) {
      mutable_teammember()->::TeamMemberInfo::MergeFrom(from.teammember());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcJoinTeamAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcJoinTeamAsk::CopyFrom(const TeamRpcJoinTeamAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcJoinTeamAsk::IsInitialized() const {

  return true;
}

void TeamRpcJoinTeamAsk::Swap(TeamRpcJoinTeamAsk* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(teamtype_, other->teamtype_);
    std::swap(team_, other->team_);
    std::swap(teammember_, other->teammember_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcJoinTeamAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcJoinTeamAsk_descriptor_;
  metadata.reflection = TeamRpcJoinTeamAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcJoinTeamReply::kResultFieldNumber;
const int TeamRpcJoinTeamReply::kTeamFieldNumber;
#endif  // !_MSC_VER

TeamRpcJoinTeamReply::TeamRpcJoinTeamReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcJoinTeamReply::InitAsDefaultInstance() {
  team_ = const_cast< ::TeamInfo*>(&::TeamInfo::default_instance());
}

TeamRpcJoinTeamReply::TeamRpcJoinTeamReply(const TeamRpcJoinTeamReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcJoinTeamReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  team_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcJoinTeamReply::~TeamRpcJoinTeamReply() {
  SharedDtor();
}

void TeamRpcJoinTeamReply::SharedDtor() {
  if (this != default_instance_) {
    delete team_;
  }
}

void TeamRpcJoinTeamReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcJoinTeamReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcJoinTeamReply_descriptor_;
}

const TeamRpcJoinTeamReply& TeamRpcJoinTeamReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcJoinTeamReply* TeamRpcJoinTeamReply::default_instance_ = NULL;

TeamRpcJoinTeamReply* TeamRpcJoinTeamReply::New() const {
  return new TeamRpcJoinTeamReply;
}

void TeamRpcJoinTeamReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    if (has_team()) {
      if (team_ != NULL) team_->::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcJoinTeamReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Team;
        break;
      }

      // optional .TeamInfo Team = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcJoinTeamReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional .TeamInfo Team = 2;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcJoinTeamReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional .TeamInfo Team = 2;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcJoinTeamReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional .TeamInfo Team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcJoinTeamReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcJoinTeamReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcJoinTeamReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcJoinTeamReply::MergeFrom(const TeamRpcJoinTeamReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_team()) {
      mutable_team()->::TeamInfo::MergeFrom(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcJoinTeamReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcJoinTeamReply::CopyFrom(const TeamRpcJoinTeamReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcJoinTeamReply::IsInitialized() const {

  return true;
}

void TeamRpcJoinTeamReply::Swap(TeamRpcJoinTeamReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcJoinTeamReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcJoinTeamReply_descriptor_;
  metadata.reflection = TeamRpcJoinTeamReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TeamRpcLeaveTeamAsk::TeamRpcLeaveTeamAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcLeaveTeamAsk::InitAsDefaultInstance() {
}

TeamRpcLeaveTeamAsk::TeamRpcLeaveTeamAsk(const TeamRpcLeaveTeamAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcLeaveTeamAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcLeaveTeamAsk::~TeamRpcLeaveTeamAsk() {
  SharedDtor();
}

void TeamRpcLeaveTeamAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcLeaveTeamAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcLeaveTeamAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcLeaveTeamAsk_descriptor_;
}

const TeamRpcLeaveTeamAsk& TeamRpcLeaveTeamAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcLeaveTeamAsk* TeamRpcLeaveTeamAsk::default_instance_ = NULL;

TeamRpcLeaveTeamAsk* TeamRpcLeaveTeamAsk::New() const {
  return new TeamRpcLeaveTeamAsk;
}

void TeamRpcLeaveTeamAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcLeaveTeamAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TeamRpcLeaveTeamAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcLeaveTeamAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcLeaveTeamAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcLeaveTeamAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcLeaveTeamAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcLeaveTeamAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcLeaveTeamAsk::MergeFrom(const TeamRpcLeaveTeamAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcLeaveTeamAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcLeaveTeamAsk::CopyFrom(const TeamRpcLeaveTeamAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcLeaveTeamAsk::IsInitialized() const {

  return true;
}

void TeamRpcLeaveTeamAsk::Swap(TeamRpcLeaveTeamAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcLeaveTeamAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcLeaveTeamAsk_descriptor_;
  metadata.reflection = TeamRpcLeaveTeamAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcLeaveTeamReply::kResultFieldNumber;
#endif  // !_MSC_VER

TeamRpcLeaveTeamReply::TeamRpcLeaveTeamReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcLeaveTeamReply::InitAsDefaultInstance() {
}

TeamRpcLeaveTeamReply::TeamRpcLeaveTeamReply(const TeamRpcLeaveTeamReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcLeaveTeamReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcLeaveTeamReply::~TeamRpcLeaveTeamReply() {
  SharedDtor();
}

void TeamRpcLeaveTeamReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcLeaveTeamReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcLeaveTeamReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcLeaveTeamReply_descriptor_;
}

const TeamRpcLeaveTeamReply& TeamRpcLeaveTeamReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcLeaveTeamReply* TeamRpcLeaveTeamReply::default_instance_ = NULL;

TeamRpcLeaveTeamReply* TeamRpcLeaveTeamReply::New() const {
  return new TeamRpcLeaveTeamReply;
}

void TeamRpcLeaveTeamReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcLeaveTeamReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcLeaveTeamReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcLeaveTeamReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcLeaveTeamReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcLeaveTeamReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcLeaveTeamReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcLeaveTeamReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcLeaveTeamReply::MergeFrom(const TeamRpcLeaveTeamReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcLeaveTeamReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcLeaveTeamReply::CopyFrom(const TeamRpcLeaveTeamReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcLeaveTeamReply::IsInitialized() const {

  return true;
}

void TeamRpcLeaveTeamReply::Swap(TeamRpcLeaveTeamReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcLeaveTeamReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcLeaveTeamReply_descriptor_;
  metadata.reflection = TeamRpcLeaveTeamReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcAppointTeamLeaderAsk::kRoleIdFieldNumber;
#endif  // !_MSC_VER

TeamRpcAppointTeamLeaderAsk::TeamRpcAppointTeamLeaderAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcAppointTeamLeaderAsk::InitAsDefaultInstance() {
}

TeamRpcAppointTeamLeaderAsk::TeamRpcAppointTeamLeaderAsk(const TeamRpcAppointTeamLeaderAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcAppointTeamLeaderAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcAppointTeamLeaderAsk::~TeamRpcAppointTeamLeaderAsk() {
  SharedDtor();
}

void TeamRpcAppointTeamLeaderAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcAppointTeamLeaderAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcAppointTeamLeaderAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcAppointTeamLeaderAsk_descriptor_;
}

const TeamRpcAppointTeamLeaderAsk& TeamRpcAppointTeamLeaderAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcAppointTeamLeaderAsk* TeamRpcAppointTeamLeaderAsk::default_instance_ = NULL;

TeamRpcAppointTeamLeaderAsk* TeamRpcAppointTeamLeaderAsk::New() const {
  return new TeamRpcAppointTeamLeaderAsk;
}

void TeamRpcAppointTeamLeaderAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcAppointTeamLeaderAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcAppointTeamLeaderAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcAppointTeamLeaderAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcAppointTeamLeaderAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcAppointTeamLeaderAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcAppointTeamLeaderAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcAppointTeamLeaderAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcAppointTeamLeaderAsk::MergeFrom(const TeamRpcAppointTeamLeaderAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcAppointTeamLeaderAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcAppointTeamLeaderAsk::CopyFrom(const TeamRpcAppointTeamLeaderAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcAppointTeamLeaderAsk::IsInitialized() const {

  return true;
}

void TeamRpcAppointTeamLeaderAsk::Swap(TeamRpcAppointTeamLeaderAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcAppointTeamLeaderAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcAppointTeamLeaderAsk_descriptor_;
  metadata.reflection = TeamRpcAppointTeamLeaderAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcAppointTeamLeaderReply::kResultFieldNumber;
const int TeamRpcAppointTeamLeaderReply::kNewLeaderIdFieldNumber;
#endif  // !_MSC_VER

TeamRpcAppointTeamLeaderReply::TeamRpcAppointTeamLeaderReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcAppointTeamLeaderReply::InitAsDefaultInstance() {
}

TeamRpcAppointTeamLeaderReply::TeamRpcAppointTeamLeaderReply(const TeamRpcAppointTeamLeaderReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcAppointTeamLeaderReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  newleaderid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcAppointTeamLeaderReply::~TeamRpcAppointTeamLeaderReply() {
  SharedDtor();
}

void TeamRpcAppointTeamLeaderReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcAppointTeamLeaderReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcAppointTeamLeaderReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcAppointTeamLeaderReply_descriptor_;
}

const TeamRpcAppointTeamLeaderReply& TeamRpcAppointTeamLeaderReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcAppointTeamLeaderReply* TeamRpcAppointTeamLeaderReply::default_instance_ = NULL;

TeamRpcAppointTeamLeaderReply* TeamRpcAppointTeamLeaderReply::New() const {
  return new TeamRpcAppointTeamLeaderReply;
}

void TeamRpcAppointTeamLeaderReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    newleaderid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcAppointTeamLeaderReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NewLeaderId;
        break;
      }

      // optional uint64 NewLeaderId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NewLeaderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &newleaderid_)));
          set_has_newleaderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcAppointTeamLeaderReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional uint64 NewLeaderId = 2 [default = 0];
  if (has_newleaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->newleaderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcAppointTeamLeaderReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional uint64 NewLeaderId = 2 [default = 0];
  if (has_newleaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->newleaderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcAppointTeamLeaderReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional uint64 NewLeaderId = 2 [default = 0];
    if (has_newleaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->newleaderid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcAppointTeamLeaderReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcAppointTeamLeaderReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcAppointTeamLeaderReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcAppointTeamLeaderReply::MergeFrom(const TeamRpcAppointTeamLeaderReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_newleaderid()) {
      set_newleaderid(from.newleaderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcAppointTeamLeaderReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcAppointTeamLeaderReply::CopyFrom(const TeamRpcAppointTeamLeaderReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcAppointTeamLeaderReply::IsInitialized() const {

  return true;
}

void TeamRpcAppointTeamLeaderReply::Swap(TeamRpcAppointTeamLeaderReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(newleaderid_, other->newleaderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcAppointTeamLeaderReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcAppointTeamLeaderReply_descriptor_;
  metadata.reflection = TeamRpcAppointTeamLeaderReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcNewLeaderNotify::kNewleaderroleidFieldNumber;
#endif  // !_MSC_VER

TeamRpcNewLeaderNotify::TeamRpcNewLeaderNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcNewLeaderNotify::InitAsDefaultInstance() {
}

TeamRpcNewLeaderNotify::TeamRpcNewLeaderNotify(const TeamRpcNewLeaderNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcNewLeaderNotify::SharedCtor() {
  _cached_size_ = 0;
  newleaderroleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcNewLeaderNotify::~TeamRpcNewLeaderNotify() {
  SharedDtor();
}

void TeamRpcNewLeaderNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcNewLeaderNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcNewLeaderNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcNewLeaderNotify_descriptor_;
}

const TeamRpcNewLeaderNotify& TeamRpcNewLeaderNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcNewLeaderNotify* TeamRpcNewLeaderNotify::default_instance_ = NULL;

TeamRpcNewLeaderNotify* TeamRpcNewLeaderNotify::New() const {
  return new TeamRpcNewLeaderNotify;
}

void TeamRpcNewLeaderNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    newleaderroleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcNewLeaderNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Newleaderroleid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &newleaderroleid_)));
          set_has_newleaderroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcNewLeaderNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 Newleaderroleid = 1 [default = 0];
  if (has_newleaderroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->newleaderroleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcNewLeaderNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 Newleaderroleid = 1 [default = 0];
  if (has_newleaderroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->newleaderroleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcNewLeaderNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Newleaderroleid = 1 [default = 0];
    if (has_newleaderroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->newleaderroleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcNewLeaderNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcNewLeaderNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcNewLeaderNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcNewLeaderNotify::MergeFrom(const TeamRpcNewLeaderNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newleaderroleid()) {
      set_newleaderroleid(from.newleaderroleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcNewLeaderNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcNewLeaderNotify::CopyFrom(const TeamRpcNewLeaderNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcNewLeaderNotify::IsInitialized() const {

  return true;
}

void TeamRpcNewLeaderNotify::Swap(TeamRpcNewLeaderNotify* other) {
  if (other != this) {
    std::swap(newleaderroleid_, other->newleaderroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcNewLeaderNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcNewLeaderNotify_descriptor_;
  metadata.reflection = TeamRpcNewLeaderNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcKickMemberAsk::kKickMemberRoleIdFieldNumber;
#endif  // !_MSC_VER

TeamRpcKickMemberAsk::TeamRpcKickMemberAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcKickMemberAsk::InitAsDefaultInstance() {
}

TeamRpcKickMemberAsk::TeamRpcKickMemberAsk(const TeamRpcKickMemberAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcKickMemberAsk::SharedCtor() {
  _cached_size_ = 0;
  kickmemberroleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcKickMemberAsk::~TeamRpcKickMemberAsk() {
  SharedDtor();
}

void TeamRpcKickMemberAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcKickMemberAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcKickMemberAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcKickMemberAsk_descriptor_;
}

const TeamRpcKickMemberAsk& TeamRpcKickMemberAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcKickMemberAsk* TeamRpcKickMemberAsk::default_instance_ = NULL;

TeamRpcKickMemberAsk* TeamRpcKickMemberAsk::New() const {
  return new TeamRpcKickMemberAsk;
}

void TeamRpcKickMemberAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kickmemberroleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcKickMemberAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 KickMemberRoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kickmemberroleid_)));
          set_has_kickmemberroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcKickMemberAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 KickMemberRoleId = 1 [default = 0];
  if (has_kickmemberroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->kickmemberroleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcKickMemberAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 KickMemberRoleId = 1 [default = 0];
  if (has_kickmemberroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->kickmemberroleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcKickMemberAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 KickMemberRoleId = 1 [default = 0];
    if (has_kickmemberroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kickmemberroleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcKickMemberAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcKickMemberAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcKickMemberAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcKickMemberAsk::MergeFrom(const TeamRpcKickMemberAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kickmemberroleid()) {
      set_kickmemberroleid(from.kickmemberroleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcKickMemberAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcKickMemberAsk::CopyFrom(const TeamRpcKickMemberAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcKickMemberAsk::IsInitialized() const {

  return true;
}

void TeamRpcKickMemberAsk::Swap(TeamRpcKickMemberAsk* other) {
  if (other != this) {
    std::swap(kickmemberroleid_, other->kickmemberroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcKickMemberAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcKickMemberAsk_descriptor_;
  metadata.reflection = TeamRpcKickMemberAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcKickMemberReply::kResultFieldNumber;
#endif  // !_MSC_VER

TeamRpcKickMemberReply::TeamRpcKickMemberReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcKickMemberReply::InitAsDefaultInstance() {
}

TeamRpcKickMemberReply::TeamRpcKickMemberReply(const TeamRpcKickMemberReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcKickMemberReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcKickMemberReply::~TeamRpcKickMemberReply() {
  SharedDtor();
}

void TeamRpcKickMemberReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcKickMemberReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcKickMemberReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcKickMemberReply_descriptor_;
}

const TeamRpcKickMemberReply& TeamRpcKickMemberReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcKickMemberReply* TeamRpcKickMemberReply::default_instance_ = NULL;

TeamRpcKickMemberReply* TeamRpcKickMemberReply::New() const {
  return new TeamRpcKickMemberReply;
}

void TeamRpcKickMemberReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcKickMemberReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcKickMemberReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcKickMemberReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcKickMemberReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcKickMemberReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcKickMemberReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcKickMemberReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcKickMemberReply::MergeFrom(const TeamRpcKickMemberReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcKickMemberReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcKickMemberReply::CopyFrom(const TeamRpcKickMemberReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcKickMemberReply::IsInitialized() const {

  return true;
}

void TeamRpcKickMemberReply::Swap(TeamRpcKickMemberReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcKickMemberReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcKickMemberReply_descriptor_;
  metadata.reflection = TeamRpcKickMemberReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TeamRpcDissmissTeamAsk::TeamRpcDissmissTeamAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcDissmissTeamAsk::InitAsDefaultInstance() {
}

TeamRpcDissmissTeamAsk::TeamRpcDissmissTeamAsk(const TeamRpcDissmissTeamAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcDissmissTeamAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcDissmissTeamAsk::~TeamRpcDissmissTeamAsk() {
  SharedDtor();
}

void TeamRpcDissmissTeamAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcDissmissTeamAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcDissmissTeamAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcDissmissTeamAsk_descriptor_;
}

const TeamRpcDissmissTeamAsk& TeamRpcDissmissTeamAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcDissmissTeamAsk* TeamRpcDissmissTeamAsk::default_instance_ = NULL;

TeamRpcDissmissTeamAsk* TeamRpcDissmissTeamAsk::New() const {
  return new TeamRpcDissmissTeamAsk;
}

void TeamRpcDissmissTeamAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcDissmissTeamAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TeamRpcDissmissTeamAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcDissmissTeamAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcDissmissTeamAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcDissmissTeamAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcDissmissTeamAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcDissmissTeamAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcDissmissTeamAsk::MergeFrom(const TeamRpcDissmissTeamAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcDissmissTeamAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcDissmissTeamAsk::CopyFrom(const TeamRpcDissmissTeamAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcDissmissTeamAsk::IsInitialized() const {

  return true;
}

void TeamRpcDissmissTeamAsk::Swap(TeamRpcDissmissTeamAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcDissmissTeamAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcDissmissTeamAsk_descriptor_;
  metadata.reflection = TeamRpcDissmissTeamAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcDissmissTeamReply::kResultFieldNumber;
#endif  // !_MSC_VER

TeamRpcDissmissTeamReply::TeamRpcDissmissTeamReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcDissmissTeamReply::InitAsDefaultInstance() {
}

TeamRpcDissmissTeamReply::TeamRpcDissmissTeamReply(const TeamRpcDissmissTeamReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcDissmissTeamReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcDissmissTeamReply::~TeamRpcDissmissTeamReply() {
  SharedDtor();
}

void TeamRpcDissmissTeamReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcDissmissTeamReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcDissmissTeamReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcDissmissTeamReply_descriptor_;
}

const TeamRpcDissmissTeamReply& TeamRpcDissmissTeamReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcDissmissTeamReply* TeamRpcDissmissTeamReply::default_instance_ = NULL;

TeamRpcDissmissTeamReply* TeamRpcDissmissTeamReply::New() const {
  return new TeamRpcDissmissTeamReply;
}

void TeamRpcDissmissTeamReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcDissmissTeamReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcDissmissTeamReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcDissmissTeamReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcDissmissTeamReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcDissmissTeamReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcDissmissTeamReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcDissmissTeamReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcDissmissTeamReply::MergeFrom(const TeamRpcDissmissTeamReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcDissmissTeamReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcDissmissTeamReply::CopyFrom(const TeamRpcDissmissTeamReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcDissmissTeamReply::IsInitialized() const {

  return true;
}

void TeamRpcDissmissTeamReply::Swap(TeamRpcDissmissTeamReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcDissmissTeamReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcDissmissTeamReply_descriptor_;
  metadata.reflection = TeamRpcDissmissTeamReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TeamRpcAppointTeamLeaderNotify::TeamRpcAppointTeamLeaderNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcAppointTeamLeaderNotify::InitAsDefaultInstance() {
}

TeamRpcAppointTeamLeaderNotify::TeamRpcAppointTeamLeaderNotify(const TeamRpcAppointTeamLeaderNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcAppointTeamLeaderNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcAppointTeamLeaderNotify::~TeamRpcAppointTeamLeaderNotify() {
  SharedDtor();
}

void TeamRpcAppointTeamLeaderNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcAppointTeamLeaderNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcAppointTeamLeaderNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcAppointTeamLeaderNotify_descriptor_;
}

const TeamRpcAppointTeamLeaderNotify& TeamRpcAppointTeamLeaderNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcAppointTeamLeaderNotify* TeamRpcAppointTeamLeaderNotify::default_instance_ = NULL;

TeamRpcAppointTeamLeaderNotify* TeamRpcAppointTeamLeaderNotify::New() const {
  return new TeamRpcAppointTeamLeaderNotify;
}

void TeamRpcAppointTeamLeaderNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcAppointTeamLeaderNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TeamRpcAppointTeamLeaderNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcAppointTeamLeaderNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcAppointTeamLeaderNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcAppointTeamLeaderNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcAppointTeamLeaderNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcAppointTeamLeaderNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcAppointTeamLeaderNotify::MergeFrom(const TeamRpcAppointTeamLeaderNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcAppointTeamLeaderNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcAppointTeamLeaderNotify::CopyFrom(const TeamRpcAppointTeamLeaderNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcAppointTeamLeaderNotify::IsInitialized() const {

  return true;
}

void TeamRpcAppointTeamLeaderNotify::Swap(TeamRpcAppointTeamLeaderNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcAppointTeamLeaderNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcAppointTeamLeaderNotify_descriptor_;
  metadata.reflection = TeamRpcAppointTeamLeaderNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcKickMemberNotifyNotify::kKickedMemberRoleIdFieldNumber;
#endif  // !_MSC_VER

TeamRpcKickMemberNotifyNotify::TeamRpcKickMemberNotifyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcKickMemberNotifyNotify::InitAsDefaultInstance() {
}

TeamRpcKickMemberNotifyNotify::TeamRpcKickMemberNotifyNotify(const TeamRpcKickMemberNotifyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcKickMemberNotifyNotify::SharedCtor() {
  _cached_size_ = 0;
  kickedmemberroleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcKickMemberNotifyNotify::~TeamRpcKickMemberNotifyNotify() {
  SharedDtor();
}

void TeamRpcKickMemberNotifyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcKickMemberNotifyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcKickMemberNotifyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcKickMemberNotifyNotify_descriptor_;
}

const TeamRpcKickMemberNotifyNotify& TeamRpcKickMemberNotifyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcKickMemberNotifyNotify* TeamRpcKickMemberNotifyNotify::default_instance_ = NULL;

TeamRpcKickMemberNotifyNotify* TeamRpcKickMemberNotifyNotify::New() const {
  return new TeamRpcKickMemberNotifyNotify;
}

void TeamRpcKickMemberNotifyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kickedmemberroleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcKickMemberNotifyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 KickedMemberRoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kickedmemberroleid_)));
          set_has_kickedmemberroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcKickMemberNotifyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 KickedMemberRoleId = 1 [default = 0];
  if (has_kickedmemberroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->kickedmemberroleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcKickMemberNotifyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 KickedMemberRoleId = 1 [default = 0];
  if (has_kickedmemberroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->kickedmemberroleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcKickMemberNotifyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 KickedMemberRoleId = 1 [default = 0];
    if (has_kickedmemberroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kickedmemberroleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcKickMemberNotifyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcKickMemberNotifyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcKickMemberNotifyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcKickMemberNotifyNotify::MergeFrom(const TeamRpcKickMemberNotifyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kickedmemberroleid()) {
      set_kickedmemberroleid(from.kickedmemberroleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcKickMemberNotifyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcKickMemberNotifyNotify::CopyFrom(const TeamRpcKickMemberNotifyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcKickMemberNotifyNotify::IsInitialized() const {

  return true;
}

void TeamRpcKickMemberNotifyNotify::Swap(TeamRpcKickMemberNotifyNotify* other) {
  if (other != this) {
    std::swap(kickedmemberroleid_, other->kickedmemberroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcKickMemberNotifyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcKickMemberNotifyNotify_descriptor_;
  metadata.reflection = TeamRpcKickMemberNotifyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcLeaveTeamNotifyNotify::kRoleIdFieldNumber;
const int TeamRpcLeaveTeamNotifyNotify::kNewLeaderRoleIdFieldNumber;
#endif  // !_MSC_VER

TeamRpcLeaveTeamNotifyNotify::TeamRpcLeaveTeamNotifyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcLeaveTeamNotifyNotify::InitAsDefaultInstance() {
}

TeamRpcLeaveTeamNotifyNotify::TeamRpcLeaveTeamNotifyNotify(const TeamRpcLeaveTeamNotifyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcLeaveTeamNotifyNotify::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  newleaderroleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcLeaveTeamNotifyNotify::~TeamRpcLeaveTeamNotifyNotify() {
  SharedDtor();
}

void TeamRpcLeaveTeamNotifyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcLeaveTeamNotifyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcLeaveTeamNotifyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcLeaveTeamNotifyNotify_descriptor_;
}

const TeamRpcLeaveTeamNotifyNotify& TeamRpcLeaveTeamNotifyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcLeaveTeamNotifyNotify* TeamRpcLeaveTeamNotifyNotify::default_instance_ = NULL;

TeamRpcLeaveTeamNotifyNotify* TeamRpcLeaveTeamNotifyNotify::New() const {
  return new TeamRpcLeaveTeamNotifyNotify;
}

void TeamRpcLeaveTeamNotifyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    newleaderroleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcLeaveTeamNotifyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NewLeaderRoleId;
        break;
      }

      // optional uint64 NewLeaderRoleId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NewLeaderRoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &newleaderroleid_)));
          set_has_newleaderroleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcLeaveTeamNotifyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional uint64 NewLeaderRoleId = 2 [default = 0];
  if (has_newleaderroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->newleaderroleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcLeaveTeamNotifyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 1 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional uint64 NewLeaderRoleId = 2 [default = 0];
  if (has_newleaderroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->newleaderroleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcLeaveTeamNotifyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 1 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional uint64 NewLeaderRoleId = 2 [default = 0];
    if (has_newleaderroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->newleaderroleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcLeaveTeamNotifyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcLeaveTeamNotifyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcLeaveTeamNotifyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcLeaveTeamNotifyNotify::MergeFrom(const TeamRpcLeaveTeamNotifyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_newleaderroleid()) {
      set_newleaderroleid(from.newleaderroleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcLeaveTeamNotifyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcLeaveTeamNotifyNotify::CopyFrom(const TeamRpcLeaveTeamNotifyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcLeaveTeamNotifyNotify::IsInitialized() const {

  return true;
}

void TeamRpcLeaveTeamNotifyNotify::Swap(TeamRpcLeaveTeamNotifyNotify* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(newleaderroleid_, other->newleaderroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcLeaveTeamNotifyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcLeaveTeamNotifyNotify_descriptor_;
  metadata.reflection = TeamRpcLeaveTeamNotifyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcJoinTeamNotifyNotify::kTeamMemberFieldNumber;
#endif  // !_MSC_VER

TeamRpcJoinTeamNotifyNotify::TeamRpcJoinTeamNotifyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcJoinTeamNotifyNotify::InitAsDefaultInstance() {
  teammember_ = const_cast< ::TeamMemberInfo*>(&::TeamMemberInfo::default_instance());
}

TeamRpcJoinTeamNotifyNotify::TeamRpcJoinTeamNotifyNotify(const TeamRpcJoinTeamNotifyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcJoinTeamNotifyNotify::SharedCtor() {
  _cached_size_ = 0;
  teammember_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcJoinTeamNotifyNotify::~TeamRpcJoinTeamNotifyNotify() {
  SharedDtor();
}

void TeamRpcJoinTeamNotifyNotify::SharedDtor() {
  if (this != default_instance_) {
    delete teammember_;
  }
}

void TeamRpcJoinTeamNotifyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcJoinTeamNotifyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcJoinTeamNotifyNotify_descriptor_;
}

const TeamRpcJoinTeamNotifyNotify& TeamRpcJoinTeamNotifyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcJoinTeamNotifyNotify* TeamRpcJoinTeamNotifyNotify::default_instance_ = NULL;

TeamRpcJoinTeamNotifyNotify* TeamRpcJoinTeamNotifyNotify::New() const {
  return new TeamRpcJoinTeamNotifyNotify;
}

void TeamRpcJoinTeamNotifyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_teammember()) {
      if (teammember_ != NULL) teammember_->::TeamMemberInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcJoinTeamNotifyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamMemberInfo TeamMember = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teammember()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcJoinTeamNotifyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TeamMemberInfo TeamMember = 1;
  if (has_teammember()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teammember(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcJoinTeamNotifyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TeamMemberInfo TeamMember = 1;
  if (has_teammember()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teammember(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcJoinTeamNotifyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamMemberInfo TeamMember = 1;
    if (has_teammember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teammember());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcJoinTeamNotifyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcJoinTeamNotifyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcJoinTeamNotifyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcJoinTeamNotifyNotify::MergeFrom(const TeamRpcJoinTeamNotifyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teammember()) {
      mutable_teammember()->::TeamMemberInfo::MergeFrom(from.teammember());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcJoinTeamNotifyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcJoinTeamNotifyNotify::CopyFrom(const TeamRpcJoinTeamNotifyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcJoinTeamNotifyNotify::IsInitialized() const {

  return true;
}

void TeamRpcJoinTeamNotifyNotify::Swap(TeamRpcJoinTeamNotifyNotify* other) {
  if (other != this) {
    std::swap(teammember_, other->teammember_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcJoinTeamNotifyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcJoinTeamNotifyNotify_descriptor_;
  metadata.reflection = TeamRpcJoinTeamNotifyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TeamRpcDissmissTeamNotifyNotify::TeamRpcDissmissTeamNotifyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcDissmissTeamNotifyNotify::InitAsDefaultInstance() {
}

TeamRpcDissmissTeamNotifyNotify::TeamRpcDissmissTeamNotifyNotify(const TeamRpcDissmissTeamNotifyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcDissmissTeamNotifyNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcDissmissTeamNotifyNotify::~TeamRpcDissmissTeamNotifyNotify() {
  SharedDtor();
}

void TeamRpcDissmissTeamNotifyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcDissmissTeamNotifyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcDissmissTeamNotifyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcDissmissTeamNotifyNotify_descriptor_;
}

const TeamRpcDissmissTeamNotifyNotify& TeamRpcDissmissTeamNotifyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcDissmissTeamNotifyNotify* TeamRpcDissmissTeamNotifyNotify::default_instance_ = NULL;

TeamRpcDissmissTeamNotifyNotify* TeamRpcDissmissTeamNotifyNotify::New() const {
  return new TeamRpcDissmissTeamNotifyNotify;
}

void TeamRpcDissmissTeamNotifyNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcDissmissTeamNotifyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TeamRpcDissmissTeamNotifyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcDissmissTeamNotifyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcDissmissTeamNotifyNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcDissmissTeamNotifyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcDissmissTeamNotifyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcDissmissTeamNotifyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcDissmissTeamNotifyNotify::MergeFrom(const TeamRpcDissmissTeamNotifyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcDissmissTeamNotifyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcDissmissTeamNotifyNotify::CopyFrom(const TeamRpcDissmissTeamNotifyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcDissmissTeamNotifyNotify::IsInitialized() const {

  return true;
}

void TeamRpcDissmissTeamNotifyNotify::Swap(TeamRpcDissmissTeamNotifyNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcDissmissTeamNotifyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcDissmissTeamNotifyNotify_descriptor_;
  metadata.reflection = TeamRpcDissmissTeamNotifyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TeamRpcSurroundingTeamAsk::TeamRpcSurroundingTeamAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcSurroundingTeamAsk::InitAsDefaultInstance() {
}

TeamRpcSurroundingTeamAsk::TeamRpcSurroundingTeamAsk(const TeamRpcSurroundingTeamAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcSurroundingTeamAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcSurroundingTeamAsk::~TeamRpcSurroundingTeamAsk() {
  SharedDtor();
}

void TeamRpcSurroundingTeamAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcSurroundingTeamAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcSurroundingTeamAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcSurroundingTeamAsk_descriptor_;
}

const TeamRpcSurroundingTeamAsk& TeamRpcSurroundingTeamAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcSurroundingTeamAsk* TeamRpcSurroundingTeamAsk::default_instance_ = NULL;

TeamRpcSurroundingTeamAsk* TeamRpcSurroundingTeamAsk::New() const {
  return new TeamRpcSurroundingTeamAsk;
}

void TeamRpcSurroundingTeamAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcSurroundingTeamAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TeamRpcSurroundingTeamAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcSurroundingTeamAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcSurroundingTeamAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcSurroundingTeamAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcSurroundingTeamAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcSurroundingTeamAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcSurroundingTeamAsk::MergeFrom(const TeamRpcSurroundingTeamAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcSurroundingTeamAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcSurroundingTeamAsk::CopyFrom(const TeamRpcSurroundingTeamAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcSurroundingTeamAsk::IsInitialized() const {

  return true;
}

void TeamRpcSurroundingTeamAsk::Swap(TeamRpcSurroundingTeamAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcSurroundingTeamAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcSurroundingTeamAsk_descriptor_;
  metadata.reflection = TeamRpcSurroundingTeamAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcSurroundingTeamReply::kResultFieldNumber;
const int TeamRpcSurroundingTeamReply::kTeamsInfoFieldNumber;
#endif  // !_MSC_VER

TeamRpcSurroundingTeamReply::TeamRpcSurroundingTeamReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcSurroundingTeamReply::InitAsDefaultInstance() {
}

TeamRpcSurroundingTeamReply::TeamRpcSurroundingTeamReply(const TeamRpcSurroundingTeamReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcSurroundingTeamReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcSurroundingTeamReply::~TeamRpcSurroundingTeamReply() {
  SharedDtor();
}

void TeamRpcSurroundingTeamReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcSurroundingTeamReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcSurroundingTeamReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcSurroundingTeamReply_descriptor_;
}

const TeamRpcSurroundingTeamReply& TeamRpcSurroundingTeamReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcSurroundingTeamReply* TeamRpcSurroundingTeamReply::default_instance_ = NULL;

TeamRpcSurroundingTeamReply* TeamRpcSurroundingTeamReply::New() const {
  return new TeamRpcSurroundingTeamReply;
}

void TeamRpcSurroundingTeamReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  teamsinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcSurroundingTeamReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TeamsInfo;
        break;
      }

      // repeated .TeamInfo TeamsInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TeamsInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teamsinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TeamsInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcSurroundingTeamReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // repeated .TeamInfo TeamsInfo = 2;
  for (int i = 0; i < this->teamsinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teamsinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcSurroundingTeamReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // repeated .TeamInfo TeamsInfo = 2;
  for (int i = 0; i < this->teamsinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teamsinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcSurroundingTeamReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  // repeated .TeamInfo TeamsInfo = 2;
  total_size += 1 * this->teamsinfo_size();
  for (int i = 0; i < this->teamsinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teamsinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcSurroundingTeamReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcSurroundingTeamReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcSurroundingTeamReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcSurroundingTeamReply::MergeFrom(const TeamRpcSurroundingTeamReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  teamsinfo_.MergeFrom(from.teamsinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcSurroundingTeamReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcSurroundingTeamReply::CopyFrom(const TeamRpcSurroundingTeamReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcSurroundingTeamReply::IsInitialized() const {

  return true;
}

void TeamRpcSurroundingTeamReply::Swap(TeamRpcSurroundingTeamReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    teamsinfo_.Swap(&other->teamsinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcSurroundingTeamReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcSurroundingTeamReply_descriptor_;
  metadata.reflection = TeamRpcSurroundingTeamReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcApplyTeamAsk::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TeamRpcApplyTeamAsk::TeamRpcApplyTeamAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcApplyTeamAsk::InitAsDefaultInstance() {
}

TeamRpcApplyTeamAsk::TeamRpcApplyTeamAsk(const TeamRpcApplyTeamAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcApplyTeamAsk::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcApplyTeamAsk::~TeamRpcApplyTeamAsk() {
  SharedDtor();
}

void TeamRpcApplyTeamAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcApplyTeamAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcApplyTeamAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcApplyTeamAsk_descriptor_;
}

const TeamRpcApplyTeamAsk& TeamRpcApplyTeamAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcApplyTeamAsk* TeamRpcApplyTeamAsk::default_instance_ = NULL;

TeamRpcApplyTeamAsk* TeamRpcApplyTeamAsk::New() const {
  return new TeamRpcApplyTeamAsk;
}

void TeamRpcApplyTeamAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcApplyTeamAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 TeamId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcApplyTeamAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 TeamId = 1 [default = -1];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcApplyTeamAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 TeamId = 1 [default = -1];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcApplyTeamAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 TeamId = 1 [default = -1];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcApplyTeamAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcApplyTeamAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcApplyTeamAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcApplyTeamAsk::MergeFrom(const TeamRpcApplyTeamAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcApplyTeamAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcApplyTeamAsk::CopyFrom(const TeamRpcApplyTeamAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcApplyTeamAsk::IsInitialized() const {

  return true;
}

void TeamRpcApplyTeamAsk::Swap(TeamRpcApplyTeamAsk* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcApplyTeamAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcApplyTeamAsk_descriptor_;
  metadata.reflection = TeamRpcApplyTeamAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcApplyTeamReply::kResultFieldNumber;
const int TeamRpcApplyTeamReply::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TeamRpcApplyTeamReply::TeamRpcApplyTeamReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcApplyTeamReply::InitAsDefaultInstance() {
}

TeamRpcApplyTeamReply::TeamRpcApplyTeamReply(const TeamRpcApplyTeamReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcApplyTeamReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  teamid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcApplyTeamReply::~TeamRpcApplyTeamReply() {
  SharedDtor();
}

void TeamRpcApplyTeamReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcApplyTeamReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcApplyTeamReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcApplyTeamReply_descriptor_;
}

const TeamRpcApplyTeamReply& TeamRpcApplyTeamReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcApplyTeamReply* TeamRpcApplyTeamReply::default_instance_ = NULL;

TeamRpcApplyTeamReply* TeamRpcApplyTeamReply::New() const {
  return new TeamRpcApplyTeamReply;
}

void TeamRpcApplyTeamReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    teamid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcApplyTeamReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional sint32 TeamId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcApplyTeamReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 TeamId = 2 [default = -1];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcApplyTeamReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 TeamId = 2 [default = -1];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcApplyTeamReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 TeamId = 2 [default = -1];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcApplyTeamReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcApplyTeamReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcApplyTeamReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcApplyTeamReply::MergeFrom(const TeamRpcApplyTeamReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcApplyTeamReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcApplyTeamReply::CopyFrom(const TeamRpcApplyTeamReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcApplyTeamReply::IsInitialized() const {

  return true;
}

void TeamRpcApplyTeamReply::Swap(TeamRpcApplyTeamReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcApplyTeamReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcApplyTeamReply_descriptor_;
  metadata.reflection = TeamRpcApplyTeamReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcApplyTeamNotifyNotify::kTeamMemberFieldNumber;
#endif  // !_MSC_VER

TeamRpcApplyTeamNotifyNotify::TeamRpcApplyTeamNotifyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcApplyTeamNotifyNotify::InitAsDefaultInstance() {
  teammember_ = const_cast< ::TeamMemberInfo*>(&::TeamMemberInfo::default_instance());
}

TeamRpcApplyTeamNotifyNotify::TeamRpcApplyTeamNotifyNotify(const TeamRpcApplyTeamNotifyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcApplyTeamNotifyNotify::SharedCtor() {
  _cached_size_ = 0;
  teammember_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcApplyTeamNotifyNotify::~TeamRpcApplyTeamNotifyNotify() {
  SharedDtor();
}

void TeamRpcApplyTeamNotifyNotify::SharedDtor() {
  if (this != default_instance_) {
    delete teammember_;
  }
}

void TeamRpcApplyTeamNotifyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcApplyTeamNotifyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcApplyTeamNotifyNotify_descriptor_;
}

const TeamRpcApplyTeamNotifyNotify& TeamRpcApplyTeamNotifyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcApplyTeamNotifyNotify* TeamRpcApplyTeamNotifyNotify::default_instance_ = NULL;

TeamRpcApplyTeamNotifyNotify* TeamRpcApplyTeamNotifyNotify::New() const {
  return new TeamRpcApplyTeamNotifyNotify;
}

void TeamRpcApplyTeamNotifyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_teammember()) {
      if (teammember_ != NULL) teammember_->::TeamMemberInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcApplyTeamNotifyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamMemberInfo TeamMember = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teammember()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcApplyTeamNotifyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TeamMemberInfo TeamMember = 1;
  if (has_teammember()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teammember(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcApplyTeamNotifyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TeamMemberInfo TeamMember = 1;
  if (has_teammember()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teammember(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcApplyTeamNotifyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamMemberInfo TeamMember = 1;
    if (has_teammember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teammember());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcApplyTeamNotifyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcApplyTeamNotifyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcApplyTeamNotifyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcApplyTeamNotifyNotify::MergeFrom(const TeamRpcApplyTeamNotifyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teammember()) {
      mutable_teammember()->::TeamMemberInfo::MergeFrom(from.teammember());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcApplyTeamNotifyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcApplyTeamNotifyNotify::CopyFrom(const TeamRpcApplyTeamNotifyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcApplyTeamNotifyNotify::IsInitialized() const {

  return true;
}

void TeamRpcApplyTeamNotifyNotify::Swap(TeamRpcApplyTeamNotifyNotify* other) {
  if (other != this) {
    std::swap(teammember_, other->teammember_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcApplyTeamNotifyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcApplyTeamNotifyNotify_descriptor_;
  metadata.reflection = TeamRpcApplyTeamNotifyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcAgreeApplicantAsk::kRoleIdFieldNumber;
#endif  // !_MSC_VER

TeamRpcAgreeApplicantAsk::TeamRpcAgreeApplicantAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcAgreeApplicantAsk::InitAsDefaultInstance() {
}

TeamRpcAgreeApplicantAsk::TeamRpcAgreeApplicantAsk(const TeamRpcAgreeApplicantAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcAgreeApplicantAsk::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcAgreeApplicantAsk::~TeamRpcAgreeApplicantAsk() {
  SharedDtor();
}

void TeamRpcAgreeApplicantAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcAgreeApplicantAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcAgreeApplicantAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcAgreeApplicantAsk_descriptor_;
}

const TeamRpcAgreeApplicantAsk& TeamRpcAgreeApplicantAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcAgreeApplicantAsk* TeamRpcAgreeApplicantAsk::default_instance_ = NULL;

TeamRpcAgreeApplicantAsk* TeamRpcAgreeApplicantAsk::New() const {
  return new TeamRpcAgreeApplicantAsk;
}

void TeamRpcAgreeApplicantAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcAgreeApplicantAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoleId = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcAgreeApplicantAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcAgreeApplicantAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 RoleId = 2 [default = 0];
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcAgreeApplicantAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoleId = 2 [default = 0];
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcAgreeApplicantAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcAgreeApplicantAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcAgreeApplicantAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcAgreeApplicantAsk::MergeFrom(const TeamRpcAgreeApplicantAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcAgreeApplicantAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcAgreeApplicantAsk::CopyFrom(const TeamRpcAgreeApplicantAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcAgreeApplicantAsk::IsInitialized() const {

  return true;
}

void TeamRpcAgreeApplicantAsk::Swap(TeamRpcAgreeApplicantAsk* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcAgreeApplicantAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcAgreeApplicantAsk_descriptor_;
  metadata.reflection = TeamRpcAgreeApplicantAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcAgreeApplicantReply::kResultFieldNumber;
#endif  // !_MSC_VER

TeamRpcAgreeApplicantReply::TeamRpcAgreeApplicantReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcAgreeApplicantReply::InitAsDefaultInstance() {
}

TeamRpcAgreeApplicantReply::TeamRpcAgreeApplicantReply(const TeamRpcAgreeApplicantReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcAgreeApplicantReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcAgreeApplicantReply::~TeamRpcAgreeApplicantReply() {
  SharedDtor();
}

void TeamRpcAgreeApplicantReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcAgreeApplicantReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcAgreeApplicantReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcAgreeApplicantReply_descriptor_;
}

const TeamRpcAgreeApplicantReply& TeamRpcAgreeApplicantReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcAgreeApplicantReply* TeamRpcAgreeApplicantReply::default_instance_ = NULL;

TeamRpcAgreeApplicantReply* TeamRpcAgreeApplicantReply::New() const {
  return new TeamRpcAgreeApplicantReply;
}

void TeamRpcAgreeApplicantReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcAgreeApplicantReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcAgreeApplicantReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcAgreeApplicantReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcAgreeApplicantReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcAgreeApplicantReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcAgreeApplicantReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcAgreeApplicantReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcAgreeApplicantReply::MergeFrom(const TeamRpcAgreeApplicantReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcAgreeApplicantReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcAgreeApplicantReply::CopyFrom(const TeamRpcAgreeApplicantReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcAgreeApplicantReply::IsInitialized() const {

  return true;
}

void TeamRpcAgreeApplicantReply::Swap(TeamRpcAgreeApplicantReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcAgreeApplicantReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcAgreeApplicantReply_descriptor_;
  metadata.reflection = TeamRpcAgreeApplicantReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcAgreeApplicantNotifyNotify::kTeamFieldNumber;
#endif  // !_MSC_VER

TeamRpcAgreeApplicantNotifyNotify::TeamRpcAgreeApplicantNotifyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcAgreeApplicantNotifyNotify::InitAsDefaultInstance() {
  team_ = const_cast< ::TeamInfo*>(&::TeamInfo::default_instance());
}

TeamRpcAgreeApplicantNotifyNotify::TeamRpcAgreeApplicantNotifyNotify(const TeamRpcAgreeApplicantNotifyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcAgreeApplicantNotifyNotify::SharedCtor() {
  _cached_size_ = 0;
  team_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcAgreeApplicantNotifyNotify::~TeamRpcAgreeApplicantNotifyNotify() {
  SharedDtor();
}

void TeamRpcAgreeApplicantNotifyNotify::SharedDtor() {
  if (this != default_instance_) {
    delete team_;
  }
}

void TeamRpcAgreeApplicantNotifyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcAgreeApplicantNotifyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcAgreeApplicantNotifyNotify_descriptor_;
}

const TeamRpcAgreeApplicantNotifyNotify& TeamRpcAgreeApplicantNotifyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcAgreeApplicantNotifyNotify* TeamRpcAgreeApplicantNotifyNotify::default_instance_ = NULL;

TeamRpcAgreeApplicantNotifyNotify* TeamRpcAgreeApplicantNotifyNotify::New() const {
  return new TeamRpcAgreeApplicantNotifyNotify;
}

void TeamRpcAgreeApplicantNotifyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team()) {
      if (team_ != NULL) team_->::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcAgreeApplicantNotifyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamInfo Team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcAgreeApplicantNotifyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TeamInfo Team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcAgreeApplicantNotifyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TeamInfo Team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcAgreeApplicantNotifyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamInfo Team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcAgreeApplicantNotifyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcAgreeApplicantNotifyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcAgreeApplicantNotifyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcAgreeApplicantNotifyNotify::MergeFrom(const TeamRpcAgreeApplicantNotifyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      mutable_team()->::TeamInfo::MergeFrom(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcAgreeApplicantNotifyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcAgreeApplicantNotifyNotify::CopyFrom(const TeamRpcAgreeApplicantNotifyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcAgreeApplicantNotifyNotify::IsInitialized() const {

  return true;
}

void TeamRpcAgreeApplicantNotifyNotify::Swap(TeamRpcAgreeApplicantNotifyNotify* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcAgreeApplicantNotifyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcAgreeApplicantNotifyNotify_descriptor_;
  metadata.reflection = TeamRpcAgreeApplicantNotifyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcTeamInfoNotify::kTeamFieldNumber;
#endif  // !_MSC_VER

TeamRpcTeamInfoNotify::TeamRpcTeamInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcTeamInfoNotify::InitAsDefaultInstance() {
  team_ = const_cast< ::TeamInfo*>(&::TeamInfo::default_instance());
}

TeamRpcTeamInfoNotify::TeamRpcTeamInfoNotify(const TeamRpcTeamInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcTeamInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  team_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcTeamInfoNotify::~TeamRpcTeamInfoNotify() {
  SharedDtor();
}

void TeamRpcTeamInfoNotify::SharedDtor() {
  if (this != default_instance_) {
    delete team_;
  }
}

void TeamRpcTeamInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcTeamInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcTeamInfoNotify_descriptor_;
}

const TeamRpcTeamInfoNotify& TeamRpcTeamInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcTeamInfoNotify* TeamRpcTeamInfoNotify::default_instance_ = NULL;

TeamRpcTeamInfoNotify* TeamRpcTeamInfoNotify::New() const {
  return new TeamRpcTeamInfoNotify;
}

void TeamRpcTeamInfoNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team()) {
      if (team_ != NULL) team_->::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcTeamInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamInfo Team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcTeamInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TeamInfo Team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcTeamInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TeamInfo Team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcTeamInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamInfo Team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcTeamInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcTeamInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcTeamInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcTeamInfoNotify::MergeFrom(const TeamRpcTeamInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      mutable_team()->::TeamInfo::MergeFrom(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcTeamInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcTeamInfoNotify::CopyFrom(const TeamRpcTeamInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcTeamInfoNotify::IsInitialized() const {

  return true;
}

void TeamRpcTeamInfoNotify::Swap(TeamRpcTeamInfoNotify* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcTeamInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcTeamInfoNotify_descriptor_;
  metadata.reflection = TeamRpcTeamInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcUpdateTeamMemInfoNotify::kTeamMemberFieldNumber;
#endif  // !_MSC_VER

TeamRpcUpdateTeamMemInfoNotify::TeamRpcUpdateTeamMemInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcUpdateTeamMemInfoNotify::InitAsDefaultInstance() {
  teammember_ = const_cast< ::TeamMemberInfo*>(&::TeamMemberInfo::default_instance());
}

TeamRpcUpdateTeamMemInfoNotify::TeamRpcUpdateTeamMemInfoNotify(const TeamRpcUpdateTeamMemInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcUpdateTeamMemInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  teammember_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcUpdateTeamMemInfoNotify::~TeamRpcUpdateTeamMemInfoNotify() {
  SharedDtor();
}

void TeamRpcUpdateTeamMemInfoNotify::SharedDtor() {
  if (this != default_instance_) {
    delete teammember_;
  }
}

void TeamRpcUpdateTeamMemInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcUpdateTeamMemInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcUpdateTeamMemInfoNotify_descriptor_;
}

const TeamRpcUpdateTeamMemInfoNotify& TeamRpcUpdateTeamMemInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamRpc_2eproto();
  return *default_instance_;
}

TeamRpcUpdateTeamMemInfoNotify* TeamRpcUpdateTeamMemInfoNotify::default_instance_ = NULL;

TeamRpcUpdateTeamMemInfoNotify* TeamRpcUpdateTeamMemInfoNotify::New() const {
  return new TeamRpcUpdateTeamMemInfoNotify;
}

void TeamRpcUpdateTeamMemInfoNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_teammember()) {
      if (teammember_ != NULL) teammember_->::TeamMemberInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcUpdateTeamMemInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamMemberInfo TeamMember = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teammember()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcUpdateTeamMemInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TeamMemberInfo TeamMember = 1;
  if (has_teammember()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teammember(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcUpdateTeamMemInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TeamMemberInfo TeamMember = 1;
  if (has_teammember()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teammember(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcUpdateTeamMemInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamMemberInfo TeamMember = 1;
    if (has_teammember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teammember());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcUpdateTeamMemInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcUpdateTeamMemInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcUpdateTeamMemInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcUpdateTeamMemInfoNotify::MergeFrom(const TeamRpcUpdateTeamMemInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teammember()) {
      mutable_teammember()->::TeamMemberInfo::MergeFrom(from.teammember());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcUpdateTeamMemInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcUpdateTeamMemInfoNotify::CopyFrom(const TeamRpcUpdateTeamMemInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcUpdateTeamMemInfoNotify::IsInitialized() const {

  return true;
}

void TeamRpcUpdateTeamMemInfoNotify::Swap(TeamRpcUpdateTeamMemInfoNotify* other) {
  if (other != this) {
    std::swap(teammember_, other->teammember_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcUpdateTeamMemInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcUpdateTeamMemInfoNotify_descriptor_;
  metadata.reflection = TeamRpcUpdateTeamMemInfoNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
